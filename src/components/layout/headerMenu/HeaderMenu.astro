---
import HomeButton from "./homeButton.astro";
import BookmarkBar from "./BookmarkBar.astro";
import SearchBar from "./SearchBar.astro";
import AccountButton from "./AccountButton.astro";
---

<div id="menu">
  <HomeButton />
  <SearchBar />
  <BookmarkBar />
  <AccountButton />
</div>

<style>
  #menu {
    margin: auto;
    display: flex;
    gap: calc(var(--MenuHeight) / 4);
  }

  @media screen and (max-width: 480px) {
    #menu {
      display: grid;
      /* margin-left: calc(var(--MenuHeight) / 4);
      margin-top: calc(var(--MenuHeight) / 4); */
      grid-template-areas: "a a a" "b c d";
    }
  }
</style>

<script>
  //Name elements & pull values

  //Menu Grid
  const menu = document.getElementById("menu") as HTMLDivElement;

  //Home Button
  const homeButton = document.getElementById("homeButton") as HTMLDivElement;
  const homeTitle = document.getElementById("homeButtonTitle") as HTMLDivElement;
  const homeTitleWidth = window.getComputedStyle(homeTitle).width;
  //Search Bar
  const searchBar = document.getElementById("searchBar") as HTMLDivElement;
  const searchBarInput = document.getElementById("searchBarInput") as HTMLInputElement;
  const searchCloseButton = document.getElementById("searchCloseButton") as HTMLDivElement;
  //Bookmarks Button
  const bookmarkBar = document.getElementById("bookmarkBar") as HTMLDivElement;
  const bookmarkDropdown = document.getElementById("bookmarkDropdown") as HTMLDivElement;

  //Define element logic states
  let homeButtonCollapsed = false;
  let searchBarClicked = false;
  let searchBarCollapsed = true;
  let bookmarkBarClicked = false;
  let bookmarkBarCollapsed = true;
  let xHovered = false;

  //Define hover listeners
  searchCloseButton.addEventListener("mouseenter", () => {
    xHovered = true;
  });
  searchCloseButton.addEventListener("mouseleave", () => {
    xHovered = false;
  });

  //Create style states
  function vsHomeButtonOpen() {
    homeButton.style.width = `calc((var(--MenuHeight) * 1.2) + ${homeTitleWidth}`;
    homeButton.style.templateGridColumns = "var(--MenuHeight) 0"
    homeTitle.style.display = "block";
    homeTitle.style.width = "100%";
  }

  function vsHomeButtonCollapsed() {
    homeButton.style.width = "var(--MenuHeight)";
    homeButton.style.templateGridColumns = "var(--MenuHeight) 0"
    homeTitle.style.display = "none";
    homeTitle.style.width = "0";

  }

  function vsSearchBarCollapsed() {
    searchBar.style.width = "var(--MenuHeight)";
    searchBar.style.gridTemplateColumns = "var(--MenuHeight) 0 0"
    searchBarInput.style.cursor = "text";
    searchCloseButton.style.display = "none";

  }

  function vsSearchBarClicked() {
    searchBar.style.width = "calc(var(--MenuHeight) * 2.2 + var(--SearchBarWidth))";
    searchBar.style.gridTemplateColumns = "var(--MenuHeight) 1fr var(--MenuHeight)"
    searchBarInput.style.cursor = "text";
    searchCloseButton.style.display = "grid";
    //Menu Grid
    menu.style.gridTemplateAreas = "'a c d' 'b b b'";
  }
  
    function vsBookmarkBarCollapsed() {
    bookmarkBar.style.width = "var(--MenuHeight)";
    bookmarkBar.style.gridTemplateColumns = "var(--MenuHeight) 0"
    bookmarkDropdown.style.display = "none";
    bookmarkDropdown.style.width = "0";
  }

    function vsBookmarkBarClicked() {
    bookmarkBar.style.width = "calc(var(--MenuHeight) + var(--SearchBarWidth))";
    bookmarkBar.style.gridTemplateColumns = "var(--MenuHeight) 1fr"
    bookmarkDropdown.style.display = "block";
    bookmarkDropdown.style.width = "100%";
        //Menu Grid
    menu.style.gridTemplateAreas = "'a a a' 'b c d'";
  }

  //Establish base states
  if (window.scrollY === 0) {
    vsHomeButtonOpen();
    vsSearchBarCollapsed();
    vsBookmarkBarCollapsed();
  } else {
    vsHomeButtonCollapsed();
    vsSearchBarCollapsed();
    vsBookmarkBarCollapsed();
  }

  //Create event listeners
  window.addEventListener("scroll", () => {
    if (window.scrollY > 0) {
    vsHomeButtonCollapsed();
    vsSearchBarCollapsed();
    vsBookmarkBarCollapsed();
  } else {
    vsHomeButtonOpen();
    vsSearchBarCollapsed();
    vsBookmarkBarCollapsed();
  }
  })

  searchBar.addEventListener("click", () => {
    if (searchBarClicked === false) {
    vsHomeButtonCollapsed();
    vsSearchBarClicked();
    vsBookmarkBarCollapsed();
    }
  })

    bookmarkBar.addEventListener("click", () => {
    if (bookmarkBarClicked === false) {
    vsHomeButtonCollapsed();
    vsSearchBarCollapsed();
    vsBookmarkBarClicked();
    }
  })

  searchBar.addEventListener("click", () => {
if (xHovered === true) {
  if (window.scrollY > 0) {  vsHomeButtonCollapsed();
  vsSearchBarCollapsed();
  vsBookmarkBarCollapsed();} else {
  vsHomeButtonOpen();
  vsSearchBarCollapsed();
  vsBookmarkBarCollapsed();}
}
  })

</script>
