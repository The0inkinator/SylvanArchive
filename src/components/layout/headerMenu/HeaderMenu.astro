---
import HomeButton from "./homeButton.astro";
import BookmarkBar from "./BookmarkBar.astro";
import SearchBar from "./SearchBar.astro";
import AccountButton from "./AccountButton.astro";
---

<div class="menu">
  <HomeButton />
  <SearchBar />
  <BookmarkBar />
  <AccountButton />
</div>

<style>
  .menu {
    margin: auto;
    display: flex;
    gap: calc(var(--MenuHeight) / 4);
  }

  @media screen and (max-width: 480px) {
    .menu {
      display: grid;
      margin-left: calc(var(--MenuHeight) / 4);
      margin-top: calc(var(--MenuHeight) / 4);
    }
  }
</style>

<script>
  //Name elements & pull values

  //Home Button
  const homeButton = document.getElementById("homeButton") as HTMLDivElement;
  const homeTitle = document.getElementById("homeButtonhomeTitle") as HTMLDivElement;
  const homeTitleWidth = window.getComputedStyle(homeTitle).width;
  //Search Bar
  const searchBar = document.getElementById("searchBar") as HTMLDivElement;
  const searchBarInput = document.getElementById("searchBarInput") as HTMLInputElement;
  const searchCloseButton = document.getElementById("searchCloseButton") as HTMLDivElement;
  //Bookmarks Button
  const bookmarkBar = document.getElementById("bookmarkBar") as HTMLDivElement;
  const bookmarkMenu = document.getElementById("bookmarkDropdown") as HTMLDivElement;

  //Define element logic states
  let homeButtonCollapsed = false;
  let searchBarClicked = false;
  let searchBarCollapsed = true;
  let bookmarkBarClicked = false;
  let bookmarkBarCollapsed = true;
  let xHovered = false;

  //Define hover listeners
  searchCloseButton.addEventListener("mouseenter", () => {
    xHovered = true;
  });
  searchCloseButton.addEventListener("mouseleave", () => {
    xHovered = false;
  });

  //Create style states
  // function vshomeButtonCollapsed() {
  //   searchBar.style.width = "var(--MenuHeight)";
  //   searchBar.style.gridTemplateColumns = "0 var(--MenuHeight) 0 1fr 0 0";
  //   homeTitle.style.display = "none";
  //   homeTitle.style.transition = "width 0.25s";
  //   homeTitle.style.width = "0";
  //   searchCloseButton.style.display = "none";
  //   searchBarClicked = false;
  //   homeButtonCollapsed = true;
  // }

  // function vsBar() {
  //   searchBar.style.width = `calc((var(--MenuHeight) * 1.2) + ${homeTitleWidth})`;
  //   searchBar.style.gridTemplateColumns = "0 var(--MenuHeight) 0 80% 0 0";
  //   homeTitle.style.display = "block";
  //   homeTitle.style.transition = "width 0.25s";
  //   homeTitle.style.width = "100%";
  //   searchCloseButton.style.display = "none";
  //   searchBarClicked = false;
  // }

  // function vssearchBarClicked() {
  //   searchBar.style.width =
  //     "calc(var(--MenuHeight) * 2.2 + var(--SearchBarWidth))";
  //   searchBar.style.gridTemplateColumns =
  //     "0 var(--MenuHeight) 1fr 0 var(--MenuHeight) 0";
  //   searchBarInput.style.cursor = "text";
  //   homeTitle.style.display = "none";
  //   homeTitle.style.transition = "width 0s";
  //   homeTitle.style.width = "0";
  //   searchCloseButton.style.display = "grid";
  //   searchBarClicked = true;
  // }

  //Establish base states


  //Create event listeners

</script>
